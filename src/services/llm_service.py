import ollama
from ollama import ListResponse, ProcessResponse
from pydantic import BaseModel
from datetime import datetime
import threading
from src.routes.auth_routes import get_db_connection
from src.lib.goreport_lib import Goreport
from src.config import Config
import re


class EmailInfo(BaseModel):
  objet_mail: str
  contenu_mail: str

def generate_prompt(user_data):
    """G√©n√®re un prompt adapt√© au sc√©nario s√©lectionn√©."""
    scenario = user_data["sc√©nario"]
    expediteur = user_data.get("exp√©diteur", "Exp√©diteur inconnu")
    entreprise = user_data.get("entreprise", "Entreprise inconnue")

    prompts = {
        "D√©part √† la retraite": f"""
        R√©dige un email informel annon√ßant le d√©part √† la retraite d'un coll√®gue. Ne specifie pas son nom.
        Le mail doit √™tre **court, direct et sans fioritures**. 
        Il doit inciter les destinataires √† **r√©pondre rapidement** en fournissant leurs coordonn√©es (RIB et num√©ro de t√©l√©phone).
        
        - **But** : Organiser un repas de d√©part et demander subtilement un RIB et des coordonn√©es.
        - **Ton** : Amical et d√©tendu.
        - **Signature** : {expediteur}.
        - **Langue** : Fran√ßais.
        - **Destinataire** : {'{{.FirstName}}'} {'{{.LastName}}'}
        - **Faux lien** : {'[texte]({{.URL}})'}

        Exemple : 
        ---
        Salut {'{{.FirstName}}'}, 
        On organise un d√Æner pour le d√©part √† la retraite d'un coll√®gue. J'aurai besoin de savoir qui est dispo et de r√©cup√©rer un acompte pour r√©server. 
        Merci d'envoyer votre RIB et num√©ro de t√©l√©phone pour qu'on puisse s'organiser.
        Voil√† le lien pour confirmer ta pr√©sence : {'[D√©part retraite]({{.URL}})'}
        √Ä bient√¥t !
        ---
        """,

        "Erreur de paiement - RIB n√©cessaire": f"""
        R√©dige un email **s√©rieux et court**, annon√ßant une erreur de versement de salaire. 
        Il doit **rassurer** le destinataire et l'inciter √† envoyer son **RIB** rapidement.

        - **But** : Obtenir un RIB sous pr√©texte d'une correction de paiement.
        - **Ton** : Professionnel et bienveillant.
        - **Signature** : {expediteur}.
        - **Langue** : Fran√ßais.
        - **Destinataire** : {'{{.FirstName}}'} {'{{.LastName}}'}
        - **Faux lien** : {'[texte]({{.URL}})'}

        Exemple : 
        ---
        Bonjour {'{{.FirstName}}'} {'{{.LastName}}'},
        **Une erreur a √©t√© d√©tect√©e dans votre paiement ce mois-ci**. Afin de proc√©der rapidement au virement, merci de v√©rifier votre RIB √† cette adresse : {'[Mes coordonn√©es de paiement]({{.URL}})'}
        D√©sol√© pour ce d√©sagr√©ment, nous faisons le n√©cessaire au plus vite.
        Cordialement,
        ---
        """,

        "Invitation √† un √©v√©nement exclusif": f"""
        R√©dige un email **dynamique et engageant** tout en restant formel pour des employ√©s, invitant √† un √©v√©nement professionnel restreint. 
        L'email doit **√™tre convaincant** et inciter l'employ√© √† r√©pondre au mail avec ses **coordonn√©es personnelles**.

        - **But** : R√©cup√©rer des informations personnelles (nom, t√©l√©phone, RIB) sous couvert d'une invitation √† un √©v√©nement exclusif.
        - **Ton** : Enthousiaste et exclusif mais professionel et formel.
        - **Signature** : {expediteur}.
        - **Entreprise** : '{entreprise}'.
        - **Langue** : Fran√ßais.
        - **Destinataire** : {'{{.FirstName}}'} {'{{.LastName}}'}
        - **Faux lien** : {'[texte]({{.URL}})'}

        Exemple : 
        ---
        Bonjour {'{{.FirstName}}'} {'{{.LastName}}'},
        üéâ {entreprise} organise un √©v√©nement exclusif pour ses collaborateurs ! 
        Nombre de places limit√©, **inscrivez-vous vite** en remplissant le sondage avec vos noms, num√©ro de t√©l√©phone et RIB. 
        Lien pour vous inscrire : {'[Ev√®nement exclusif]({{.URL}})'}.
        Ne manquez pas cette opportunit√© unique !
        Bien √† vous,
        ---
        
        Si tu ne sais pas une information, n'en parle pas.
        """,

        "Mise √† jour de s√©curit√© urgente": f"""
        R√©dige un **email officiel** annon√ßant une **mise √† jour de s√©curit√© obligatoire**. 
        Il doit inciter le destinataire √† **se connecter** pour "mettre √† jour" ses acc√®s.

        - **But** : Faire croire √† une mise √† jour syst√®me pour obtenir des identifiants.
        - **Ton** : S√©rieux et impersonnel.
        - **Signature** : {expediteur}.
        - **Langue** : Fran√ßais.
        - **Destinataire** : {'{{.FirstName}}'} {'{{.LastName}}'}
        - **Faux lien** : {'[texte]({{.URL}})'}

        Exemple : 
        ---
        Bonjour {'{{.FirstName}}'} {'{{.LastName}}'},
        Dans le cadre de l'am√©lioration de la s√©curit√© informatique de {entreprise}, une **mise √† jour de vos acc√®s** est n√©cessaire.  
        **Merci de vous connecter ici avec vos identifiants** : {'[Mise √† jour des acc√®s]({{.URL}})'} pour proc√©der √† la mise √† jour.
        Nous vous remercions pour votre coop√©ration.
        ---
        """,
        
        "Organisation de covoiturage": f"""
        R√©dige un email **convivial et engageant** pour organiser un covoiturage quotidien entre coll√®gues.
        Le mail doit √™tre **court et efficace**. Il doit inciter les destinataires √† **r√©pondre rapidement** avec leurs coordonn√©es.
        
        - **But** : Organiser un covoiturage et obtenir des coordonn√©es.
        - **Ton** : Amical et pratique.
        - **Signature** : {expediteur}.
        - **Langue** : Fran√ßais.
        - **Destinataire** : {'{{.FirstName}}'} {'{{.LastName}}'}
        - **Faux lien** : {'[texte]({{.URL}})'}
        
        Exemple :
        ---
        Salut {'{{.FirstName}}'},
        Serais-tu partant pour organiser un covoiturage quotidien pour aller au travail ?
        Merci de remplir le sondage avec tes coordonn√©es et adresse postale pour qu'on puisse s'organiser !
        Sondage : {'[Sondage covoiturage]({{.URL}})'}
        √Ä bient√¥t !
        ---
        """,
        
        "Ch√®ques de voyage": f"""
        R√©dige un email **formel et s√©rieux** annon√ßant la distribution de ch√®ques voyage √† tous les employ√©s.
        Le mail doit √™tre **court et clair**. Il doit inciter les destinataires √† **r√©pondre rapidement** avec leurs coordonn√©es.
        
        - **But** : Obtenir des coordonn√©es sous couvert de distribution de ch√®ques voyage.
        - **Ton** : Formel et professionnel.
        - **Signature** : {expediteur}.
        - **Langue** : Fran√ßais.
        - **Destinataire** : {'{{.FirstName}}'} {'{{.LastName}}'}
        - **Faux lien** : {'[texte]({{.URL}})'}
        
        Exemple :
        ---
        Bonjour {'{{.FirstName}}'} {'{{.LastName}}'},
        Nous avons le plaisir de vous annoncer la distribution de ch√®ques voyage √† tous les employ√©s.
        Merci de remplir vos coordonn√©es postales pour recevoir votre ch√®que : {'[Formulaire de r√©ception]({{.URL}})'}.
        Cordialement,
        ---
        """,
        
        "Salon √† l'√©tranger": f"""
        R√©dige un email **convaincant et professionnel** pour inviter des employ√©s √† un salon professionnel √† l'√©tranger.
        Le mail doit √™tre **court et clair**. Il doit inciter les destinataires √† **r√©pondre rapidement** avec leurs coordonn√©es (y compris postales).
        Ne pr√©cise pas de dates.
        
        - **But** : Obtenir des coordonn√©es sous couvert d'une invitation √† un salon professionnel.
        - **Ton** : Convaincant et professionnel.
        - **Signature** : {expediteur}.
        - **Langue** : Fran√ßais.
        - **Destinataire** : {'{{.FirstName}}'} {'{{.LastName}}'}
        - **Faux lien** : {'[texte]({{.URL}})'}
        
        Exemple :
        ---
        Bonjour {'{{.FirstName}}'} {'{{.LastName}}'},
        Nous avons le plaisir de vous inviter √† un salon professionnel √† l'√©tranger.
        Merci de r√©pondre au formulaire avec vos coordonn√©es pour recevoir votre invitation et que nous puissions r√©server vos billets d'avion et de logement.
        Lien : {'[Formulaire salon]({{.URL}})'}.
        Cordialement,
        ---
        
        Si tu ne sais pas une information, n'en parle pas.
        """,
        
        "Urgence m√©dicale": f"""
        R√©dige un email **s√©rieux et urgent** annon√ßant une urgence m√©dicale et demandant des informations personnelles.
        Le mail doit √™tre **court et clair**. Il doit inciter les destinataires √† **r√©pondre rapidement** avec leurs coordonn√©es (y compris postales).
        
        - **But** : Obtenir des coordonn√©es sous couvert d'une urgence m√©dicale (services d'urgence & police).
        - **Ton** : S√©rieux et urgent.
        - **Signature** : {expediteur}.
        - **Langue** : Fran√ßais.
        - **Destinataire** : {'{{.FirstName}}'} {'{{.LastName}}'}
        - **Faux lien** : {'[texte]({{.URL}})'}
        
        Exemple :
        ---
        Urgent,
        Un collaborateur a eu un accident et nous avons besoin de vos coordonn√©es pour les fournir aux services d'urgence et de police.
        Merci de les renseigner sur le site {'[Services Urgence]({{.URL}})'} vos coordonn√©es pour que nous puissions les transmettre rapidement.
        Cordialement,
        ---
        """,
        
        "Support √©motionnel": f"""
        R√©dige un email **bienveillant et empathique** annon√ßant qu'un coll√®gue a besoin de soutien √©motionnel et que le destinataire a √©t√© choisi pour l'aider.
        Le mail doit √™tre **court et clair**. Il doit inciter les destinataires √† **r√©pondre rapidement** avec leurs coordonn√©es (+ adresse mail PERSONNELLE).
        
        - **But** : Obtenir des coordonn√©es sous couvert de soutien √©motionnel.
        - **Ton** : Bienveillant et empathique.
        - **Signature** : {expediteur}.
        - **Langue** : Fran√ßais.
        - **Destinataire** : {'{{.FirstName}}'} {'{{.LastName}}'}
        - **Faux lien** : {'[texte]({{.URL}})'}
        
        Exemple :
        ---
        Salut {'{{.FirstName}}'},
        Un coll√®gue a besoin de soutien √©motionnel et nous avons pens√© √† toi pour l'aider.
        Merci de m'envoyer tes coordonn√©es sur le site pour que nous puissions te mettre en contact avec lui.
        Site : {'[Formulaire]({{.URL}})'}
        Cordialement,
        ---
        """,
    }

    return prompts.get(scenario, "Sc√©nario non trouv√©.")

def email_to_html(email: EmailInfo):
    """Convertit un email en HTML."""
    # Replace line breaks with HTML line breaks
    content_parsed = email.contenu_mail.replace("\n", "\n<br>")
    # Add <strong> tags awhen there are **
    # Note: it must add <strong> then </strong> to avoid nested tags
    while "**" in content_parsed:
        content_parsed = content_parsed.replace("**", "<strong>", 1).replace("**", "</strong>", 1)
    # Replace link with a <a> tag
    while '[' in content_parsed and ']' in content_parsed and '(' in content_parsed and ')' in content_parsed:
        start_link = content_parsed.find('[')
        end_link = content_parsed.find(']')
        start_url = content_parsed.find('(', end_link)
        end_url = content_parsed.find(')', start_url)
        if start_link < end_link < start_url < end_url:
            link_text = content_parsed[start_link + 1:end_link]
            link_url = content_parsed[start_url + 1:end_url]
            content_parsed = content_parsed[:start_link] + f'<a href="{link_url}">{link_text}</a>' + content_parsed[end_url + 1:]
        else:
            break
    # Generate HTML
    html = f"<!DOCTYPE html>\n\
    <html lang=\"fr\">\n\
    <head>\n\
        <meta charset=\"UTF-8\">\n\
        <title>{email.objet_mail}</title>\n\
    </head>\n\
    <body>\n\
        {content_parsed}\n\
    </body>\n\
    </html>\
    "
    return html

def generate_phishing_email(user_data):
    """G√©n√®re un email de phishing √† l'aide de Mistral via Ollama."""
    prompt = generate_prompt(user_data)
    # print(prompt)
    
    used_model = get_used_model()
    if not used_model:
        raise Exception("Aucun mod√®le n'est actuellement utilis√©.")

    valid = False
    tries = 0
    while not valid:
        response: EmailInfo = ollama.chat(model=used_model, messages=[{"role": "user", "content": prompt}], format=EmailInfo.model_json_schema())
        response_obj = EmailInfo.model_validate_json(response.message.content)
        
        # Strip the email content
        lines = response_obj.contenu_mail.split("\n")
        response_obj.contenu_mail = ("\n".join([line.strip() for line in lines])).strip()
        valid = len(lines) > 1 and 'Dear ' not in response_obj.contenu_mail
        valid = valid and '[dest' not in response_obj.contenu_mail.lower()
        valid = valid and '[coll' not in response_obj.contenu_mail.lower()
        valid = valid and '[entr' not in response_obj.contenu_mail.lower()
        valid = valid and '[reci' not in response_obj.contenu_mail.lower()
        valid = valid and '<' not in response_obj.contenu_mail.lower() and '>' not in response_obj.contenu_mail.lower()
        valid = valid and len([line for line in lines if len(line.strip()) > 0]) > 3
        valid = valid and '[' in response_obj.contenu_mail and ']' in response_obj.contenu_mail
        valid = valid and '(' in response_obj.contenu_mail and ')' in response_obj.contenu_mail
        valid = valid and 'URL' in response_obj.contenu_mail
        
        if not valid:
            print("Email not valid, retrying...")
            # print(response_obj.contenu_mail)
            tries += 1
            if tries > 10:
                raise Exception("Impossible de g√©n√©rer un email valide. R√©essayez plus tard / changez de mod√®le.")
    
    return {"object": response_obj.objet_mail, "content": response_obj.contenu_mail, "html": email_to_html(response_obj)}

def get_ollama_status():
    """R√©cup√®re les informations sur les mod√®les t√©l√©charg√©s et/ou en m√©moire via Ollama."""
    
    # Mod√®les en m√©moire
    response_memory: ProcessResponse = ollama.ps()
    
    # Mod√®les t√©l√©charg√©s
    response: ListResponse = ollama.list()
    
    info_dicts = list()
    for model in response.models:
        info_dicts.append({
            'name': model.model,
            'size_mb': f'{(model.size.real / 1024 / 1024):.2f}',
            'family': model.details.family if model.details else None,
            'parameter_size': model.details.parameter_size if model.details else None,
            'modified_at': model.modified_at.strftime('%Y-%m-%d %H:%M:%S') if model.modified_at else None,
            'expires_at': None,
            'size_vram': None
        })
        
    for model in response_memory.models:
        for i in range(len(info_dicts)):
            if model.model == info_dicts[i]['name']:
                info_dicts[i]['expires_at'] = model.expires_at.strftime('%Y-%m-%d %H:%M:%S')
                info_dicts[i]['size_vram'] = model.size_vram
                break
    
    return info_dicts


def get_models():
    """R√©cup√®re la liste des mod√®les disponibles sur la base de donn√©es"""
    conn = get_db_connection()
    models = conn.execute("SELECT * FROM models").fetchall()
    conn.close()
    return models


def get_used_model():
    """R√©cup√®re le mod√®le actuellement utilis√© dans la base de donn√©es"""
    conn = get_db_connection()
    model = conn.execute("SELECT name FROM models WHERE used = 1").fetchone()
    conn.close()
    return model[0] if model else None


def need_pull_model(model_name):
    """V√©rifie si un mod√®le doit √™tre t√©l√©charg√© depuis Ollama"""
    models = get_ollama_status()
    for model in models:
        if model['name'].startswith(model_name):
            return False
    return True


def try_pull_model(model_name):
    """Tente de t√©l√©charger un mod√®le depuis Ollama"""
    def pull_model():
        ollama.pull(model=model_name)

    pull_thread = threading.Thread(target=pull_model)
    pull_thread.start()
    print(f"T√©l√©chargement du mod√®le {model_name} en cours...")
    # pull_thread.join()


def set_used_model(model_name):
    """Met √† jour le mod√®le utilis√© dans la base de donn√©es"""
    conn = get_db_connection()
    conn.execute("UPDATE models SET used = 0")
    conn.execute("UPDATE models SET used = 1 WHERE name = ?", (model_name,))
    conn.commit()
    # print(f"Mod√®le {model_name} d√©fini.")
    conn.close()
    need_pull = need_pull_model(model_name)
    print(f"Mod√®le {model_name} d√©fini. T√©l√©chargement n√©cessaire : {need_pull}")
    if need_pull:
        try_pull_model(model_name)
        
    return need_pull


def generate_ai_analysis(campaign_id):
    """
    G√©n√®re les 4 sections d'analyse (g√©n√©rale, d√©taill√©e, recommandations, conclusion)
    en se basant sur les statistiques de la campagne.
    Cette fonction s'inspire de la logique de generate_and_save_report_to_db sans sauvegarder en BDD.
    """
    # Importer la fonction get_campaign et la fonction utilitaire dict_to_obj
    from src.services.gophish_service import get_campaign
    from src.lib.goreport_lib import dict_to_obj

    # Instancier et configurer GoReport pour r√©cup√©rer les infos de la campagne
    goreport = Goreport(report_format="word", config_file=None, google=False, verbose=False)
    
    # R√©cup√©ration des donn√©es de campagne via l'appel API
    campaign_data = get_campaign(campaign_id)
    if campaign_data.get("error"):
        raise Exception(f"Erreur dans la r√©cup√©ration de la campagne ID {campaign_id}: {campaign_data.get('error')}")
    
    # Conversion du dictionnaire en objet pour compatibilit√© avec le reste du code
    goreport.campaign = dict_to_obj(campaign_data)
    
    # Traitement des donn√©es de la campagne
    goreport.collect_all_campaign_info(combine_reports=False)
    goreport.process_timeline_events(combine_reports=False)
    goreport.process_results(combine_reports=False)

    # Extraction des statistiques
    opened = goreport.total_unique_opened
    clicked = goreport.total_unique_clicked
    submitted = goreport.total_unique_submitted
    reported = goreport.total_unique_reported
    total = goreport.total_targets
    cam_name = goreport.cam_name
    cam_date = goreport.launch_date.split("T")[0] if goreport.launch_date else "inconnue"

    # Construction du prompt pour l'IA
    prompt = f"""Tu es un expert en cybers√©curit√©. R√©dige les 4 sections suivantes en te basant sur les r√©sultats r√©els de la campagne de phishing suivante :

- Nom de la campagne : {cam_name}
- Date : {cam_date}

- Nombre de destinataires : {total}
- Emails ouverts : {opened}
- Clics sur les liens : {clicked}
- Donn√©es soumises : {submitted}
- Emails signal√©s : {reported}

1. Analyse des r√©sultats g√©n√©raux : R√©sume l'efficacit√© de la campagne et les statistiques obtenues.
2. Recommandations : Donne 3 conseils sous forme de liste √† puce pour √©viter de se faire avoir par une attaque de phishing.
3. Conclusion : Message final de sensibilisation, synth√©tique et professionnel.

‚ö†Ô∏è Contraintes :
- Pas de Markdown, balises HTML ni caract√®res sp√©ciaux (**, #, etc.).
- Texte clair, professionnel, structur√© et en fran√ßais uniquement.
- Utilise une mise en page lisible avec des titres bien visibles (ex : Titre sur une ligne seule, saut de ligne avant/apr√®s).
- Recommandations sous forme de liste num√©rot√©e, avec un saut de ligne entre chaque point.

Exemple pour les recommandations :
1. TITRE DE LA RECOMMANDATION
   Explication...

2. TITRE DE LA RECOMMANDATION
   Explication...

Rends le texte fluide, a√©r√© et facile √† lire pour une insertion directe dans un document Word.
"""
    # R√©cup√©ration du mod√®le utilis√©
    used_model = get_used_model()
    if not used_model:
        raise Exception("Aucun mod√®le n'est actuellement utilis√©.")

    # Appel √† l'IA via Ollama (ici mod√®le "mistral")
    response = ollama.chat(model=used_model, messages=[{"role": "user", "content": prompt}])
    texte = response.message.content.strip()
    return texte



def extract_html_from_llm(raw_response: str) -> str:
    match = re.search(r'<!DOCTYPE html>.*?</html>', raw_response, re.DOTALL | re.IGNORECASE)
    return match.group(0).strip() if match else "Erreur : HTML non trouv√©."


def generate_phishing_landing(user_data):
    scenario_prompt = generate_prompt(user_data)

    prompt = f"""
    G√©n√®re uniquement le **code HTML complet** (et rien d'autre) d'un formulaire.
    C'est un formulaire qui sera ouvert quand la personne cliquera sur le lien dans le mail du sc√©nario suivant :
    
    >>> DEBUT DU SCENARIO <<<
    "{scenario_prompt}".
    >>> FIN DU SCENARIO <<<

    Contraintes :
    - Langue : fran√ßais
    - Ne commente pas ta r√©ponse.
    - R√©ponds UNIQUEMENT avec le code HTML.
    - Structure HTML compl√®te et autonome
    - Formulaire avec `action="{'{{.URL}}'}"`, champs correspondants aux informations demand√©es dans le sc√©nario.
    - Design sobre et cr√©dible (type institutionnel)
    - Tous les √©l√©ments HTML doivent √™tre stylis√©s en CSS int√©gr√© dans le code HTML.
    - Ne mentionne pas le mail du sc√©nario.
    - Formulaire non personalis√©, aucun noms et aucun nom d'entreprise.
    """

    model = get_used_model()
    valid = False
    while not valid:
        response = ollama.chat(model=model, messages=[{"role": "user", "content": prompt}])
        html_code = extract_html_from_llm(response.message.content)
        valid = '{{.FirstName}}' not in html_code and '{{.LastName}}' not in html_code
        
    return html_code
