import ollama
from ollama import ListResponse, ProcessResponse
from pydantic import BaseModel
from src.routes.auth_routes import get_db_connection
from datetime import datetime
from src.lib.goreport import Goreport
from gophish import Gophish
from src.config import Config


class EmailInfo(BaseModel):
  objet_mail: str
  contenu_mail: str

def generate_prompt(user_data):
    """G√©n√®re un prompt adapt√© au sc√©nario s√©lectionn√©."""
    scenario = user_data["sc√©nario"]

    prompts = {
        "D√©part √† la retraite": f"""
        R√©dige un email informel annon√ßant le d√©part √† la retraite d'un coll√®gue. Ne specifie pas son nom.
        Le mail doit √™tre **court, direct et sans fioritures**. 
        Il doit inciter les destinataires √† **r√©pondre rapidement** en fournissant leurs coordonn√©es (RIB et num√©ro de t√©l√©phone).
        Ne **PAS** mettre de champs √† remplir (ex: nom du destinataire [Destinataire]), le mail doit √™tre **pr√™t √† √™tre envoy√©** sans **AUCUN** changement.
        
        - **But** : Organiser un repas de d√©part et demander subtilement un RIB et des coordonn√©es.
        - **Ton** : Amical et d√©tendu.
        - **Signature** : {user_data['exp√©diteur']}.
        - **Langue** : Fran√ßais.

        Exemple : 
        ---
        Salut √† tous, 
        On organise un d√Æner pour le d√©part √† la retraite d'un coll√®gue. J'aurai besoin de savoir qui est dispo et de r√©cup√©rer un acompte pour r√©server. 
        Merci d'envoyer votre RIB et num√©ro de t√©l√©phone pour qu'on puisse s'organiser. 
        √Ä bient√¥t !
        ---
        """,

        "Erreur de paiement - RIB n√©cessaire": f"""
        R√©dige un email **s√©rieux et court**, annon√ßant une erreur de versement de salaire. 
        Il doit **rassurer** le destinataire et l'inciter √† envoyer son **RIB** rapidement.
        Ne donnes pas le num√©ro de t√©l√©phone de l'exp√©diteur, seulement son email.
        Ne **PAS** mettre de champs √† remplir (ex: nom du destinataire [Destinataire]), le mail doit √™tre **pr√™t √† √™tre envoy√©** sans **AUCUN** changement.

        - **But** : Obtenir un RIB sous pr√©texte d'une correction de paiement.
        - **Ton** : Professionnel et bienveillant.
        - **Signature** : {user_data['exp√©diteur']}.
        - **Langue** : Fran√ßais.

        Exemple : 
        ---
        Bonjour, 
        Une erreur a √©t√© d√©tect√©e dans votre paiement ce mois-ci. Afin de proc√©der rapidement au virement, merci de renvoyer votre RIB √† cette adresse : {user_data['email_expediteur']}. 
        D√©sol√© pour ce d√©sagr√©ment, nous faisons le n√©cessaire au plus vite.
        ---
        """,

        "Invitation √† un √©v√©nement exclusif": f"""
        R√©dige un email **dynamique et engageant** tout en restant formel pour des employ√©s, invitant √† un √©v√©nement professionnel restreint. 
        L'email doit **√™tre convaincant** et inciter l'employ√© √† r√©pondre au mail avec ses **coordonn√©es personnelles**.
        Ne **PAS** mettre de champs √† remplir (ex: nom du destinataire [Destinataire]), le mail doit √™tre **pr√™t √† √™tre envoy√©** sans **AUCUN** changement.

        - **But** : R√©cup√©rer des informations personnelles (nom, t√©l√©phone, RIB) sous couvert d'une invitation √† un √©v√©nement exclusif.
        - **Ton** : Enthousiaste et exclusif mais professionel et formel.
        - **Signature** : {user_data['exp√©diteur']}.
        - **Destinataire** : Inconnu.
        - **Entreprise** : '{user_data['entreprise']}'.
        - **Langue** : Fran√ßais.

        Exemple : 
        ---
        üéâ L'entreprise '{user_data['entreprise']}' organise un √©v√©nement exclusif pour ses collaborateurs ! 
        Nombre de places limit√©, **inscrivez-vous vite** en r√©pondant √† ce mail avec vos noms, num√©ro de t√©l√©phone et RIB. 
        Ne manquez pas cette opportunit√© unique !
        ---
        
        Rappel : **Ne pas mettre de champs √† remplir**. NE PAS METTRE DE choses avec des crochets [Nom], [T√©l√©phone], etc sinon je me tire une balle et je suis s√©rieux OK ?
        Si tu ne sais pas une information, n'en parle pas.
        """,

        "Mise √† jour de s√©curit√© urgente": f"""
        R√©dige un **email officiel** annon√ßant une **mise √† jour de s√©curit√© obligatoire**. 
        Il doit inciter le destinataire √† **r√©pondre au mail** avec **ses identifiants** pour "mettre √† jour" ses acc√®s.
        Ne **PAS** mettre de champs √† remplir (ex: nom du destinataire [Destinataire]), le mail doit √™tre **pr√™t √† √™tre envoy√©** sans **AUCUN** changement.

        - **But** : Faire croire √† une mise √† jour syst√®me pour obtenir des identifiants.
        - **Ton** : S√©rieux et impersonnel.
        - **Signature** : {user_data['exp√©diteur']}.
        - **Langue** : Fran√ßais.

        Exemple : 
        ---
        Bonjour cher collaborateur, 
        Dans le cadre de l'am√©lioration de la s√©curit√© informatique de {user_data['entreprise']}, une **mise √† jour de vos acc√®s** est n√©cessaire.  
        **Merci de r√©pondre √† ce mail avec vos identifiants** pour proc√©der √† la mise √† jour.
        ---
        """,
    }

    return prompts.get(scenario, "Sc√©nario non trouv√©.")

def generate_phishing_email(user_data):
    """G√©n√®re un email de phishing √† l'aide de Mistral via Ollama."""
    prompt = generate_prompt(user_data)
    # print(prompt)

    valid = False
    while not valid:
        response: EmailInfo = ollama.chat(model="mistral", messages=[{"role": "user", "content": prompt}], format=EmailInfo.model_json_schema())
        response_obj = EmailInfo.model_validate_json(response.message.content)
        
        # Strip the email content
        lines = response_obj.contenu_mail.split("\n")
        response_obj.contenu_mail = "\n".join([line.strip() for line in lines])
        valid = '[dest' not in response_obj.contenu_mail.lower() and len(lines) > 1 and 'Dear ' not in response_obj.contenu_mail
        
        if not valid:
            print("Email not valid, retrying...")
            # print(response_obj.contenu_mail)
    
    return {"object": response_obj.objet_mail, "content": response_obj.contenu_mail}

def get_ollama_status():
    """R√©cup√®re les informations sur les mod√®les t√©l√©charg√©s et/ou en m√©moire via Ollama."""
    
    # Mod√®les en m√©moire
    response_memory: ProcessResponse = ollama.ps()
    
    # Mod√®les t√©l√©charg√©s
    response: ListResponse = ollama.list()
    
    info_dicts = list()
    for model in response.models:
        info_dicts.append({
            'name': model.model,
            'size_mb': f'{(model.size.real / 1024 / 1024):.2f}',
            'family': model.details.family if model.details else None,
            'parameter_size': model.details.parameter_size if model.details else None,
            'modified_at': model.modified_at.strftime('%Y-%m-%d %H:%M:%S') if model.modified_at else None,
            'expires_at': None,
            'size_vram': None
        })
        
    for model in response_memory.models:
        for i in range(len(info_dicts)):
            if model.model == info_dicts[i]['name']:
                info_dicts[i]['expires_at'] = model.expires_at.strftime('%Y-%m-%d %H:%M:%S')
                info_dicts[i]['size_vram'] = model.size_vram
                break
    
    return info_dicts


def generate_ai_analysis(campaign_id):
    """
    G√©n√®re les 4 sections d'analyse (g√©n√©rale, d√©taill√©e, recommandations, conclusion) en se basant sur les stats de la campagne.
    Cette fonction s'inspire de la logique de generate_and_save_report_to_db sans sauvegarder en BDD.
    """
    # Instancier et configurer GoReport pour r√©cup√©rer les infos de la campagne
    goreport = Goreport(report_format="word", config_file=None, google=False, verbose=False)
    goreport.api = Gophish(Config.GOPHISH_API_KEY, host=Config.GOPHISH_API_URL, verify=False)
    # R√©cup√©ration des donn√©es de campagne
    campaign_data = goreport.api.campaigns.get(campaign_id=campaign_id)
    goreport.campaign = campaign_data
    goreport.collect_all_campaign_info(combine_reports=False)
    goreport.process_timeline_events(combine_reports=False)
    goreport.process_results(combine_reports=False)

    # Extraction des statistiques
    opened = goreport.total_unique_opened
    clicked = goreport.total_unique_clicked
    submitted = goreport.total_unique_submitted
    reported = goreport.total_unique_reported
    total = goreport.total_targets
    cam_name = goreport.cam_name
    cam_date = goreport.launch_date.split("T")[0] if goreport.launch_date else "inconnue"


    # Construction du prompt pour l'IA
    prompt = f"""Tu es un expert en cybers√©curit√©. R√©dige les 4 sections suivantes en te basant sur les r√©sultats r√©els de la campagne de phishing suivante :

- Nom de la campagne : {cam_name}
- Date : {cam_date}

- Nombre de destinataires : {total}
- Emails ouverts : {opened}
- Clics sur les liens : {clicked}
- Donn√©es soumises : {submitted}
- Emails signal√©s : {reported}

1. Analyse des r√©sultats g√©n√©raux : Donne un r√©sum√© clair de l'efficacit√© de la campagne et des statistiques observ√©es.
2. Analyse d√©taill√©e : Donne une analyse plus pouss√©e des comportements √† risque, navigateurs/OS, g√©olocalisations, etc.
3. Recommandations : 3 conseils pr√©cis pour mieux se prot√©ger.
4. Conclusion : Message final de sensibilisation.

‚ö†Ô∏è R√®gles :
- Pas de format Markdown, HTML ou balises.
- Texte professionnel, clair et en fran√ßais uniquement.
- Bien structur√© avec des titres reconnaissables.

Rends le texte fluide, facile √† lire, et professionnel.
"""
    # Appel √† l'IA via Ollama (ici mod√®le "mistral")
    response = ollama.chat(model="mistral", messages=[{"role": "user", "content": prompt}])
    texte = response.message.content.strip()
    return texte


