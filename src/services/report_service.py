import subprocess
import os
import re
from flask import send_file
from datetime import datetime
from pathlib import Path
from docx import Document
from docx.shared import Pt
from io import BytesIO
import ollama
from src.config import Config
from gophish import Gophish
from src.lib.goreport import Goreport
from src.services.llm_service import generate_ai_analysis

def get_latest_goreport_docx(campaign_id):
    reports_dir = os.path.abspath(os.path.join(os.path.dirname(__file__), "..", "reports"))
    candidates = sorted(Path(reports_dir).glob(f"rapport_campagne_{campaign_id}_*.docx"), key=os.path.getmtime, reverse=True)
    return candidates[0] if candidates else None

def generate_docx_with_goreport(campaign_id, force=False):
    print(f"üöÄ G√©n√©ration GoReport pour la campagne {campaign_id}")

    # Dossier de stockage des rapports
    reports_dir = os.path.abspath(os.path.join(os.path.dirname(__file__), "..", "reports"))
    reports_path = Path(reports_dir)
    pattern = f"rapport_campagne_{campaign_id}_*.docx"

    # Si force est True, supprimer les anciens rapports pour cette campagne
    if force:
        for f in reports_path.glob(pattern):
            try:
                os.remove(f)
                print(f"üóë Suppression de l'ancien rapport : {f}")
            except Exception as e:
                print("Erreur lors de la suppression :", e)

    # Lancement de GoReport pour g√©n√©rer le rapport de base
    result = subprocess.run(
        ["python3", "GoReport.py", "--id", str(campaign_id), "--format", "word"],
        cwd=os.path.abspath(os.path.join(os.path.dirname(__file__), "..", "services")),
        capture_output=True,
        text=True
    )

    if result.returncode != 0:
        print("‚ùå GoReport Error:", result.stderr)
        raise RuntimeError("Erreur GoReport : " + result.stderr)

    print("‚úÖ GoReport ex√©cut√© avec succ√®s")

    # R√©cup√©rer le dernier fichier g√©n√©r√©
    latest_file = None
    for f in sorted(reports_path.glob(pattern), key=os.path.getmtime, reverse=True):
        latest_file = f
        break

    if not latest_file:
        raise FileNotFoundError("Aucun fichier DOCX g√©n√©r√© par GoReport")

    print(f"üìÑ Rapport trouv√© : {latest_file}")

    # G√©n√©ration du texte d'analyse via l'IA
    ai_text = generate_ai_analysis(campaign_id)
    # Ouvrir le document g√©n√©r√© pour y ajouter le rapport d'analyse
    document = Document(str(latest_file))
    document.add_page_break()
    document.add_heading("Analyse de la campagne", level=1)
    # D√©couper le texte g√©n√©r√© en sections
    sections = split_ai_text_into_sections(ai_text)
    for title, content in sections:
        document.add_heading(title, level=2)
        p = document.add_paragraph(content)
        p.style.font.size = Pt(11)
    
    # Sauvegarder le document final
    document.save(str(latest_file))
    
    # Retourner le fichier final
    return send_file(
        str(latest_file),
        as_attachment=True,
        download_name=latest_file.name,
        mimetype="application/vnd.openxmlformats-officedocument.wordprocessingml.document"
    )


def split_ai_text_into_sections(text):
    """
    D√©coupe un texte g√©n√©r√© par IA en sections reconnaissables.
    Nettoie le texte des caract√®res * typiques du markdown.
    Reconna√Æt les titres avec ou sans mise en forme Markdown.
    Retourne une liste de tuples (titre, contenu).
    """

    # üîπ Nettoyage Markdown : suppression des √©toiles
    text = re.sub(r'\*+', '', text)

    # üîπ Titres attendus (analyse d√©taill√©e supprim√©e)
    TITRE_SECTIONS = {
        "analyse des r√©sultats g√©n√©raux": "Analyse des r√©sultats g√©n√©raux",
        "recommandations": "Recommandations",
        "conclusion": "Conclusion"
    }

    # üîπ Pattern regex : d√©tecte les titres seuls sur une ligne
    pattern = re.compile(
        r'^\s*(Analyse des r√©sultats g√©n√©raux|Recommandations|Conclusion)\s*$',
        re.IGNORECASE | re.MULTILINE
    )

    matches = list(pattern.finditer(text))
    sections = []

    if not matches:
        return [("Analyse compl√®te", text.strip())]

    for i, match in enumerate(matches):
        titre_brut = match.group(1).strip().lower()
        titre_normalis√© = TITRE_SECTIONS.get(titre_brut, titre_brut.title())
        start = match.end()
        end = matches[i + 1].start() if i + 1 < len(matches) else len(text)
        contenu = text[start:end].strip()
        if contenu:
            sections.append((titre_normalis√©, contenu))

    # üîπ Ajout de sections manquantes avec contenu vide
    titres_extraits = [t for t, _ in sections]
    for titre_attendu in TITRE_SECTIONS.values():
        if titre_attendu not in titres_extraits:
            sections.append((titre_attendu, ""))

    return sections


def download_report_styled(campaign_id):
    """
    Cherche le dernier rapport Word g√©n√©r√© pour une campagne donn√©e et le renvoie en t√©l√©chargement.
    """
    # R√©pertoire contenant les rapports g√©n√©r√©s
    reports_dir = os.path.abspath(os.path.join(os.path.dirname(__file__), "..", "reports"))

    # R√©cup√©rer les rapports tri√©s par date (du plus r√©cent au plus ancien)
    candidates = sorted(
        Path(reports_dir).glob(f"rapport_campagne_{campaign_id}_*.docx"),
        key=os.path.getmtime,
        reverse=True
    )

    latest_file = candidates[0] if candidates else None
    if not latest_file:
        return "Rapport introuvable", 404

    # Envoyer le fichier en t√©l√©chargement
    return send_file(
        str(latest_file),
        as_attachment=True,
        download_name=latest_file.name,
        mimetype="application/vnd.openxmlformats-officedocument.wordprocessingml.document"
    )